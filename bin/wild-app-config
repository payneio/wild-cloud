#!/bin/bash

set -e
set -o pipefail

UPDATE=false

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --update)
            UPDATE=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 <app_name> [--update]"
            echo ""
            echo "Configure an app by applying templates and merging configuration."
            echo ""
            echo "Options:"
            echo "  --update    Overwrite existing app files without confirmation"
            echo "  -h, --help  Show this help message"
            exit 0
            ;;
        -*)
            echo "Unknown option $1"
            echo "Usage: $0 <app_name> [--update]"
            exit 1
            ;;
        *)
            if [ -z "${APP_NAME}" ]; then
                APP_NAME="$1"
            else
                echo "Too many arguments"
                echo "Usage: $0 <app_name> [--update]"
                exit 1
            fi
            shift
            ;;
    esac
done

if [ -z "${APP_NAME}" ]; then
    echo "Usage: $0 <app_name> [--update]"
    exit 1
fi

# Initialize Wild Cloud environment
if [ -z "${WC_ROOT}" ]; then
    print "WC_ROOT is not set."
    exit 1
else
    source "${WC_ROOT}/scripts/common.sh"
    init_wild_env
fi

CONFIG_FILE="${WC_HOME}/config.yaml"
if [ ! -f "${CONFIG_FILE}" ]; then
    echo "Creating config file at ${CONFIG_FILE}"
    echo "# Wild Cloud Configuration" > "${CONFIG_FILE}"
    echo "# This file contains app configurations and should be committed to git" >> "${CONFIG_FILE}"
    echo "" >> "${CONFIG_FILE}"
fi

SECRETS_FILE="${WC_HOME}/secrets.yaml"
if [ ! -f "${SECRETS_FILE}" ]; then
    echo "Creating secrets file at ${SECRETS_FILE}"
    echo "# Wild Cloud Secrets Configuration" > "${SECRETS_FILE}"
    echo "# This file contains sensitive data and should NOT be committed to git" >> "${SECRETS_FILE}"
    echo "# Add this file to your .gitignore" >> "${SECRETS_FILE}"
    echo "" >> "${SECRETS_FILE}"
fi

# Check if app is cached, if not fetch it first
CACHE_APP_DIR="${WC_HOME}/.wildcloud/cache/apps/${APP_NAME}"
if [ ! -d "${CACHE_APP_DIR}" ]; then
    echo "Cache directory for app '${APP_NAME}' not found at ${CACHE_APP_DIR}"
    echo "Please fetch the app first using 'wild-app-fetch ${APP_NAME}'"
    exit 1
fi
if [ ! -d "${CACHE_APP_DIR}" ]; then
    echo "App '${APP_NAME}' not found in cache, fetching..."
    if [ "${UPDATE}" = true ]; then
        ./bin/wild-app-fetch "${APP_NAME}" --update
    else
        ./bin/wild-app-fetch "${APP_NAME}"
    fi
fi

APPS_DIR="${WC_HOME}/apps"
if [ ! -d "${APPS_DIR}" ]; then
    echo "Creating apps directory at ${APPS_DIR}"
    mkdir -p "${APPS_DIR}"
fi

DEST_APP_DIR="${WC_HOME}/apps/${APP_NAME}"
if [ -d "${DEST_APP_DIR}" ]; then
    if [ "${UPDATE}" = true ]; then
        echo "Updating app '${APP_NAME}'"
        rm -rf "${DEST_APP_DIR}"
    else
        echo "Warning: Destination directory ${DEST_APP_DIR} already exists"
        read -p "Do you want to overwrite it? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Configuration cancelled"
            exit 1
        fi
        rm -rf "${DEST_APP_DIR}"
    fi
fi
mkdir -p "${DEST_APP_DIR}"

echo "Pulling app '${APP_NAME}' from cache to ${DEST_APP_DIR}"

# Merge defaultConfig from manifest.yaml into .wildcloud/config.yaml
MANIFEST_FILE="${CACHE_APP_DIR}/manifest.yaml"
if [ -f "${MANIFEST_FILE}" ]; then
    echo "Merging defaultConfig from manifest.yaml into .wildcloud/config.yaml"
    
    # Check if the app section exists in config.yaml, if not create it
    if ! yq eval ".apps.${APP_NAME}" "${CONFIG_FILE}" >/dev/null 2>&1; then
        yq eval ".apps.${APP_NAME} = {}" -i "${CONFIG_FILE}"
    fi
    
    # Extract defaultConfig from manifest.yaml and merge into config.yaml
    if yq eval '.defaultConfig' "${MANIFEST_FILE}" | grep -q -v '^null$'; then
        # Merge each key from defaultConfig into the app's config, only if not already set
        yq eval '.defaultConfig | keys | .[]' "${MANIFEST_FILE}" | while read -r key; do
            # Get the value from defaultConfig
            value=$(yq eval ".defaultConfig.${key}" "${MANIFEST_FILE}")
            
            # Check if key exists and is not null in app config
            current_value=$(yq eval ".apps.${APP_NAME}.${key} // \"null\"" ${CONFIG_FILE})
            
            if [ "${current_value}" = "null" ]; then
                # Process value through gomplate if it contains template syntax
                if [[ "${value}" == *"{{"* && "${value}" == *"}}"* ]]; then
                    # Build gomplate command with config context
                    gomplate_cmd="gomplate -c .=${CONFIG_FILE}"
                    
                    # Add secrets context if secrets.yaml exists
                    if [ -f "${SECRETS_FILE}" ]; then
                        gomplate_cmd="${gomplate_cmd} -c secrets=${SECRETS_FILE}"
                    fi
                    
                    # Process the value through gomplate
                    processed_value=$(echo "${value}" | ${gomplate_cmd})
                    value="${processed_value}"
                fi
                
                if [[ "${value}" =~ ^[0-9]+$ ]] || [[ "${value}" =~ ^[0-9]+\.[0-9]+$ ]] || [ "${value}" = "true" ] || [ "${value}" = "false" ]; then
                    # Numeric, boolean values don't need quotes
                    yq eval ".apps.${APP_NAME}.${key} = ${value}" -i "${CONFIG_FILE}"
                else
                    # String values need quotes
                    yq eval ".apps.${APP_NAME}.${key} = \"${value}\"" -i "${CONFIG_FILE}"
                fi
            fi
        done
        echo "Merged defaultConfig for app '${APP_NAME}'"
    fi
    
    # Scaffold required secrets into .wildcloud/secrets.yaml if they don't exist
    if yq eval '.requiredSecrets' "${MANIFEST_FILE}" | grep -q -v '^null$'; then
        echo "Scaffolding required secrets for app '${APP_NAME}'"
        
        # Ensure .wildcloud/secrets.yaml exists
        if [ ! -f "${SECRETS_FILE}" ]; then
            echo "# Wild Cloud Secrets Configuration" > "${SECRETS_FILE}"
            echo "# This file contains sensitive data and should NOT be committed to git" >> "${SECRETS_FILE}"
            echo "# Add this file to your .gitignore" >> "${SECRETS_FILE}"
            echo "" >> "${SECRETS_FILE}"
        fi
        
        # Check if apps section exists, if not create it
        if ! yq eval ".apps" "${SECRETS_FILE}" >/dev/null 2>&1; then
            yq eval ".apps = {}" -i "${SECRETS_FILE}"
        fi
        
        # Check if app section exists, if not create it
        if ! yq eval ".apps.${APP_NAME}" "${SECRETS_FILE}" >/dev/null 2>&1; then
            yq eval ".apps.${APP_NAME} = {}" -i "${SECRETS_FILE}"
        fi
        
        # Add dummy values for each required secret if not already present
        yq eval '.requiredSecrets[]' "${MANIFEST_FILE}" | while read -r secret_path; do
            current_value=$(yq eval ".${secret_path} // \"null\"" "${SECRETS_FILE}")
            
            if [ "${current_value}" = "null" ]; then
                echo "Adding dummy secret: ${secret_path}"
                # Extract just the key name for the dummy value
                secret_key=$(basename "${secret_path}")
                yq eval ".${secret_path} = \"CHANGE_ME_${secret_key^^}\"" -i "${SECRETS_FILE}"
            fi
        done
        
        echo "Required secrets scaffolded for app '${APP_NAME}'"
    fi
fi

# Function to process a file with gomplate if it's a YAML file
process_file() {
    local src_file="$1"
    local dest_file="$2"
    
    echo "Processing YAML file: ${dest_file}"
    
    # Build gomplate command with config context (enables .config shorthand)
    gomplate_cmd="gomplate -c .=${CONFIG_FILE}"
    
    # Add secrets context if secrets.yaml exists (enables .secrets shorthand)
    if [ -f "${SECRETS_FILE}" ]; then
        gomplate_cmd="${gomplate_cmd} -c secrets=${SECRETS_FILE}"
    fi
    
    # Execute gomplate with the file
    ${gomplate_cmd} -f "${src_file}" > "${dest_file}"
}

# Copy directory structure and process files
find "${CACHE_APP_DIR}" -type d | while read -r src_dir; do
    rel_path="${src_dir#${CACHE_APP_DIR}}"
    rel_path="${rel_path#/}"  # Remove leading slash if present
    if [ -n "${rel_path}" ]; then
        mkdir -p "${DEST_APP_DIR}/${rel_path}"
    fi
done

find "${CACHE_APP_DIR}" -type f | while read -r src_file; do
    rel_path="${src_file#${CACHE_APP_DIR}}"
    rel_path="${rel_path#/}"  # Remove leading slash if present
    dest_file="${DEST_APP_DIR}/${rel_path}"
    
    # Ensure destination directory exists
    dest_dir=$(dirname "${dest_file}")
    mkdir -p "${dest_dir}"
    
    process_file "${src_file}" "${dest_file}"
done

echo "Successfully pulled app '${APP_NAME}' with template processing"